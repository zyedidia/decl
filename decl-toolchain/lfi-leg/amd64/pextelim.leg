%{
#include "amd64/amd64.h"
#include "op.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \

static struct op* pext;
static char* pextreg;
static bool clobber;
static bool flaguse;
%}

Top = (Pext | FlagClobber | FlagUse) !.

Pext = 'pext' SEP '%r15' - COMMA r:REG COMMA '%r11' - {
    pext = yy->op;
    pextreg = strdup(r.val);
    rfree(r);
}

FlagClobber = FlagClobberInsn [bwlq]? SEP rest:REMAINDER {
    clobber = true;
    rfree(rest);
}

FlagClobberInsn =
      'add'
    | 'and'
    | 'cmp'
    | 'dec'
    | 'imul'
    | 'inc'
    | 'lsl'
    | 'neg'
    | 'or'
    | 'sub'
    | 'test'
    | 'xor'
    | 'call'

FlagUse = FlagUseInsn [bwlq]? SEP rest:REMAINDER {
    flaguse = true;
    rfree(rest);
}

FlagUseInsn =
      'jmp' 'q'? # jump does not use the flag, but it goes to a BB that could
    | 'j' cc
    | 'cmov' cc
    | 'cmps' [bdqsw]?
    | 'da' [as]
    | 'fcmov' fcc
    | 'ins' [bd]
    | 'into'
    | 'lods' [bdqw]?
    | 'loop' ('e' | 'ne')
    | 'set' cc
    | 'stos' [bdqw]?
    | 'movs' ([qswxbd] | 'hdup' | 'ldup' | 'xd')?
    | 'rc' [lr]
    | 'sbb'
    | 'scas' [bdqw]?
    | 'aaa'
    | 'aas'
    | 'adc'

fcc = [a-z] [a-z]?

cc = [a-z] [a-z]?

%%

static void
parse(struct op* op, yycontext* ctx)
{
    clobber = false;
    flaguse = false;
    pext = NULL;

    if (!op)
        return;
    memset(ctx, 0, sizeof(*ctx));
    ctx->op = op;
    yyparse(ctx);
    yyrelease(ctx);
}

static int removed;
static int total;

enum {
    MAX_SCAN_DIST = 128,
};

void
amd64_pextelim(struct op* ops)
{
    // look for pext
    struct op* op = ops;
    yycontext ctx;
    while (op) {
        parse(op, &ctx);

        if (pext) {
            total++;
            struct op* mpext = pext;
            char* mpextreg = pextreg;
            bool replace = false;
            struct op* scan = pext->next;
            int n = 0;
            while (scan) {
                parse(scan, &ctx);
                // We found a pext while scanning for clobbers. In the future, we could
                // create a dynamic array of pexts and replace them all based on the result
                // of this scan. For now we do the dumb and inefficient thing.
                if (pext)
                    free(pextreg);
                if (clobber)
                    replace = true;
                if (clobber || flaguse || n >= MAX_SCAN_DIST)
                    break;
                n++;
                scan = scan->next;
            }
            if (replace) {
                oplocate(mpext);
                if (strcmp(mpextreg, "%r11") != 0)
                    mkinsn("movq %s, %%r11", mpextreg);
                op = mkinsn("andq %%r15, %%r11");
                opremove(mpext);
                free(mpextreg);
                removed++;
            }
        }

        op = op->next;
    }

    // stats
    // fprintf(stderr, "removed %d/%d pexts\n", removed, total);
}
