%{
#include "amd64/amd64.h"
#include "op.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \

static void
mask(const char* reg)
{
    if (args.p2size == 0) {
        mkinsn("pext %%r15, %s, %s", reg, reg);
        mkinsn("leaq (%%r14, %s), %s", reg, reg);
    } else {
        mkinsn("movl %s, %s", lo(reg), lo(reg));
        mkinsn("leaq (%%r14, %s), %s", reg, reg);
    }
}
%}

Top = (Stos | Movs | Lea | Triple2 | StoreH | Store | Access) !.

Stos = s:STOS rest:REMAINDER {
    mkdirective(".bundle_lock");
    mask("%rdi");
    mkinsn("%s%s", s.val, rest.val);
    if (args.poc) {
        mkinsn("movl %%edi, %%edi");
    }
    mkdirective(".bundle_unlock");
    rfree(s); rfree(rest);
}

STOS = < ('rep' [ \t\r\n;]+)? 'stos' [qlb] > &(SEP | !.) {
    $$ = (Result) { .val = strclean(yytext, yyleng) }
}

Movs = m:MOVS rest:REMAINDER {
    mkdirective(".bundle_lock");
    mask("%rdi");
    mask("%rsi");
    mkinsn("%s%s", m.val, rest.val);
    if (args.poc) {
        mkinsn("movl %%edi, %%edi");
        mkinsn("movl %%esi, %%esi");
    }
    mkdirective(".bundle_unlock");
    rfree(m); rfree(rest);
}

MOVS = < ('rep' [ \t\r\n;]+)? 'movs' [qlb] > &(SEP | !.) {
    $$ = (Result) { .val = strclean(yytext, yyleng) }
}

Lea = l:LEA a:Addr COMMA r:REG {
    mkinsn("%s %s, %s", l.val, a.unmod, r.val);
    rfree(l); rfree(a); rfree(r);
}

LEA = < ('lea' [wlq]?) > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }

Access = m:NAME a:Addr {
    mkguards(a);
    mkinsn("%s %s", m.val, a.val);
    mkpost(a);
    rfree(m); rfree(a);
}

StoreH = m:NAME r:HREG COMMA a:AddrH {
    mkguards(a);
    mkinsn("%s %s, %s", m.val, r.val, a.val);
    mkpost(a);
    rfree(m); rfree(a); rfree(r);
}

Store = m:NAME r:ITEM COMMA a:Addr {
    mkguards(a);
    mkinsn("%s %s, %s", m.val, r.val, a.val);
    mkpost(a);
    rfree(m); rfree(a); rfree(r);
}

Triple2 = m:NAME r1:ITEM COMMA r2:ITEM COMMA a:Addr {
    mkguards(a);
    mkinsn("%s %s, %s, %s", m.val, r1.val, r2.val, a.val);
    mkpost(a);
    rfree(m); rfree(a); rfree(r1); rfree(r2);
}

%%

void
amd64_storespass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
