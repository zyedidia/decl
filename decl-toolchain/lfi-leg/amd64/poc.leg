%{
#include "amd64/amd64.h"
#include "op.h"
#include "args.h"
#include "util.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \

char* funcret = "1023";
%}

Top = CallInd | LeaRip | LeaImmRspRegDisp | LeaRspRegDisp | LeaImmRspReg | LeaRspReg | LeaRsp | MovRsp | AddRsp | MovGot

CallInd = 'call' 'q'? SEP '*' r:XREG {
    if (args.nopie) {
        mkinsn("push $%sf", funcret);
        mkinsn("jmpq *%s", r.val);
    } else if (strcmp(r.val, "%r11") == 0) {
        // need %rax as a temporary since %r11 is already in use
        mkinsn("pushq %%rax");
        mkinsn("leal %sf(%%rip), %%eax", funcret);
        // restore %rax and push the return address at the same time
        mkinsn("xchg %%rax, (%%rsp)");
        mkinsn("jmpq *%s", r.val);
    } else {
        mkdirective(".bundle_lock");
        mkinsn("leal %sf(%%rip), %%r11d", funcret);
        mkinsn("pushq %%r11");
        mkdirective(".bundle_unlock");
        mkinsn("jmpq *%s", r.val);
    }
    rfree(r);
}

LeaRip = 'lea' 'q'? SEP (i:IMM_VAR LP '%rip' RP) COMMA r:XREG_NOSP {
    mkinsn("leal %s(%%rip), %s", i.val, lo(r.val));
    rfree(i); rfree(r);
}

LeaRsp = 'lea' 'q'? SEP (i:IMM_VAR LP '%rsp' RP) COMMA r:XREG_NOSP {
    mkinsn("leal %s(%%rsp), %s", i.val, lo(r.val));
    rfree(i); rfree(r);
}

LeaImmRspReg = 'lea' 'q'? SEP (i:IMM_VAR LP '%rsp' COMMA x:XREG_NOSP RP) COMMA r:XREG_NOSP {
    mkinsn("leal %s(%%rsp, %s), %s", i.val, x.val, lo(r.val));
    rfree(i); rfree(r); rfree(x);
}

LeaRspReg = 'lea' 'q'? SEP (LP '%rsp' COMMA x:XREG_NOSP RP) COMMA r:XREG_NOSP {
    mkinsn("leal (%%rsp, %s), %s", x.val, lo(r.val));
    rfree(r); rfree(x);
}

LeaImmRspRegDisp = 'lea' 'q'? SEP (i:IMM_VAR LP '%rsp' COMMA x:XREG COMMA d:IMM RP) COMMA r:XREG {
    mkinsn("leal %s(%%rsp, %s, %s), %s", i.val, x.val, d.val, lo(r.val));
    rfree(i); rfree(r); rfree(x); rfree(d);
}

LeaRspRegDisp = 'lea' 'q'? SEP (LP '%rsp' COMMA x:XREG_NOSP COMMA d:IMM RP) COMMA r:XREG_NOSP {
    mkinsn("leal (%%rsp, %s, %s), %s", x.val, d.val, lo(r.val));
    rfree(d); rfree(r); rfree(x);
}

MovRsp = 'mov' 'q'? SEP '%rsp' COMMA r:XREG {
    mkinsn("movl %%esp, %s", lo(r.val));
    rfree(r);
}

MovGot = 'mov' 'q'? SEP n:NAME '@GOTPCREL(%rip)' COMMA r:XREG {
    mkinsn("movl %s@GOTPCREL(%%rip), %s", n.val, lo(r.val));
    rfree(n); rfree(r);
}

AddRsp = 'add' 'q'? SEP '%rsp' COMMA r:XREG {
    mkdirective(".bundle_lock");
    mkinsn("movl %%esp, %%r11d");
    mkinsn("addq %%r11, %s", r.val);
    mkdirective(".bundle_unlock");
    rfree(r);
}

%%

void
amd64_pocpass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
