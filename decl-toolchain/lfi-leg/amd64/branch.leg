%{
#include "amd64/amd64.h"
#include "op.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \
%}

Top = Branch | BranchMem | BranchMemSafe | CallTLS | CallInd | CallIndMem | CallIndMemSafe | Call | Ret

CallInd = 'call' 'q'? SEP '*' r:XREG {
    if (!args.poc) {
        mkdirective(".bundle_lock");
        bundle_mask(r.val);
        mkinsn("callq *%s", r.val);
        mkdirective(".bundle_unlock");
        mkdirective(bundle_align());
        mkfuncret();
    } else {
        mkinsn("movq %s, %%r11", r.val);
        mkdirective(".bundle_lock");
        bundle_mask("%r11");
        bundle_nop_indcall();
        mkinsn("callq *%%r11");
        mkdirective(".bundle_unlock");
        mkdirective(bundle_align());
        mkfuncret();
    }
    rfree(r);
}

CallTLS = 'call' 'q'? SEP '*' n:NAME '@TLSCALL' LP x:XREG_NOSP RP {
    // TODO: support bundlecall
    mkinsn(".nops 13");
    mkinsn("callq *%s@TLSCALL(%s)", n.val, x.val);
    mkdirective(bundle_align());
    rfree(n); rfree(x);
}

CallIndMem = 'call' 'q'? SEP '*' a:Addr {
    if (args.boxtype < BOX_FULL) {
        mkinsn("movq %s, %%r11", a.unmod);
    } else {
        mkguards(a);
        mkinsn("movq %s, %%r11", a.val);
        mkpost(a);
    }
    if (args.bundlecall)
        mkdirective(bundle_align());
    mkdirective(".bundle_lock");
    bundle_mask("%r11");
    bundle_nop_indcall();
    mkinsn("callq *%%r11");
    mkdirective(".bundle_unlock");
    mkdirective(bundle_align());
    mkfuncret();
    rfree(a);
}

CallIndMemSafe = 'call' 'q'? SEP '*' a:Addr {
    mkinsn("movq %s, %%r11", a.unmod);
    if (args.bundlecall)
        mkdirective(bundle_align());
    mkdirective(".bundle_lock");
    bundle_mask("%r11");
    bundle_nop_indcall();
    mkinsn("callq *%%r11");
    mkdirective(".bundle_unlock");
    mkdirective(bundle_align());
    mkfuncret();
    rfree(a);
}

Call = 'call' 'q'? - rest:ITEM {
    if (args.poc && args.nopie) {
        mkinsn("push $%sf", funcret);
        mkinsn("jmp %s", rest.val);
        mkdirective(bundle_align());
        mkfuncret();
    } else if (args.poc) {
        mkinsn("leal %sf(%%rip), %%r11d", funcret);
        mkinsn("pushq %%r11");
        mkinsn("jmp %s", rest.val);
        mkdirective(bundle_align());
        mkfuncret();
    } else {
        if (args.bundlecall)
            mkdirective(bundle_align());
        bundle_nop_call();
        mkinsn("callq %s", rest.val);
        mkdirective(bundle_align());
        rfree(rest);
    }
}

BranchMem = j:JMP - '*' a:Addr {
    if (args.boxtype < BOX_FULL) {
        mkinsn("movq %s, %%r11", a.unmod);
    } else {
        mkguards(a);
        mkinsn("movq %s, %%r11", a.val);
        mkpost(a);
    }
    mkdirective(".bundle_lock");
    bundle_mask("%r11");
    mkinsn("%s *%%r11", j.val);
    mkdirective(".bundle_unlock");
    rfree(j); rfree(a);
}

BranchMemSafe = j:JMP - '*' a:Addr {
    mkinsn("movq %s, %%r11", a.unmod);
    mkdirective(".bundle_lock");
    bundle_mask("%r11");
    mkinsn("%s *%%r11", j.val);
    mkdirective(".bundle_unlock");
    rfree(j); rfree(a);
}

Branch = j:JMP '*' r:XREG {
    if (!args.poc) {
        mkdirective(".bundle_lock");
        bundle_mask(r.val);
        mkinsn("%s *%s", j.val, r.val);
        mkdirective(".bundle_unlock");
    } else {
        mkinsn("movq %s, %%r11", r.val);
        mkdirective(".bundle_lock");
        bundle_mask("%r11");
        mkinsn("%s *%%r11", j.val);
        mkdirective(".bundle_unlock");
    }
    rfree(j); rfree(r);
}

JMP = < 'notrack'? - 'jmp' 'q'? > - {
    $$ = (Result) { .val = strndup(yytext, yyleng) }
}

Ret = 'ret' 'q'? - {
    if (args.useret) {
        mkinsn("ret");
    } else if (args.singlethread && args.boxtype <= BOX_BUNDLEJUMPS) {
        mkdirective(".bundle_lock");
        mkinsn("andq $0xffffffff%s, (%%rsp)", bundle_mask_constant());
        mkinsn("ret");
        mkdirective(".bundle_unlock");
    } else {
        mkinsn("popq %%r11");
        mkdirective(".bundle_lock");
        bundle_mask("%r11");
        mkinsn("jmpq *%%r11");
        mkdirective(".bundle_unlock");
    }
}

%%

void
amd64_branchpass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
