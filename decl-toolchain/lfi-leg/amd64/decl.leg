%{
#include "amd64/amd64.h"
#include "op.h"
#include "args.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \
%}

Top = ShiftInsn | BsInsn

ShiftInsn = (
    (s:ShiftQ SEP '%cl' - COMMA x1:REG COMMA x2:REG) {
        // Impossible to overflow in this case due to CPU's automatic mask
        mkinsn("%s %%cl, %s, %s", s.val, x1.val, x2.val);
        rfree(x1); rfree(x2);
    }
    | (s:ShiftL SEP '%cl' - COMMA x1:REG COMMA x2:REG) {
        mkdirective(".bundle_lock");
        mkinsn("movq %%rcx, %%r11");
        mkinsn("andb $0x1f, %%cl");
        mkinsn("%s %%cl, %s, %s", s.val, x1.val, x2.val);
        mkinsn("movq %%r11, %%rcx");
        mkdirective(".bundle_unlock");
        rfree(x1); rfree(x2);
    }
    | (s:ShiftW SEP '%cl' - COMMA x1:REG COMMA x2:REG) {
        mkdirective(".bundle_lock");
        mkinsn("movq %%rcx, %%r11");
        mkinsn("andb $0xf, %%cl");
        mkinsn("%s %%cl, %s, %s", s.val, x1.val, x2.val);
        mkinsn("movq %%r11, %%rcx");
        mkdirective(".bundle_unlock");
        rfree(x1); rfree(x2);
    }
    | (s:ShiftB SEP '%cl' - COMMA x1:REG COMMA x2:REG) {
        mkdirective(".bundle_lock");
        mkinsn("movq %%rcx, %%r11");
        mkinsn("andb $0x7, %%cl");
        mkinsn("%s %%cl, %s, %s", s.val, x1.val, x2.val);
        mkinsn("movq %%r11, %%rcx");
        mkdirective(".bundle_unlock");
        rfree(x1); rfree(x2);
    }
)

ShiftQ = < Shift 'q' > { $$ = (Result) { .val = strndup(yytext, yyleng) } }
ShiftL = < Shift 'l' > { $$ = (Result) { .val = strndup(yytext, yyleng) } }
ShiftW = < Shift 'w' > { $$ = (Result) { .val = strndup(yytext, yyleng) } }
ShiftB = < Shift 'b' > { $$ = (Result) { .val = strndup(yytext, yyleng) } }

Shift = ('shrd' | 'shld')

BsInsn = insn:Bs SEP src:REG COMMA dst:REG {
    mkdirective(".bundle_lock");
    mkinsn("test %s, %s", src.val, src.val);
    mkinsn("jz 1024f");
    mkinsn("%s %s, %s", insn.val, src.val, dst.val);
    mkdirective(".bundle_unlock");
    mkinsn("1024:");
}

Bs = < ('bsr' | 'bsf') > { $$ = (Result) { .val = strndup(yytext, yyleng) } }

%%

void
amd64_declpass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
