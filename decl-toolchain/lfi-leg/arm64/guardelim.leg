%{
#include "arm64/arm64.h"
#include "op.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \

static char* guardsrc;
static bool redundant;
%}

Top = Guard | Branch | ModMulti | Mod

Guard = 'add' SEP 'x18' - COMMA 'x21' - COMMA w:WREG COMMA 'uxtw' - {
    if (guardsrc && strcmp(num(guardsrc), num(w.val)) == 0) {
        redundant = true;
        rfree(w);
    } else {
        guardsrc = w.val;
    }
}

# Assumes maximum number of registers that an instruction can modify is 2. This
# could also be smarter by only covering the particular instructions that
# modify their first two operands, rather than conservatively assuming all
# instructions do.
ModMulti = (!NoMod ID) SEP r1:REG COMMA r2:REG rest:REMAINDER {
    if (guardsrc && (strcmp(num(guardsrc), num(r1.val)) == 0 || strcmp(num(guardsrc), num(r2.val)) == 0 || strcmp(num(r1.val), "18") == 0)) {
        guardsrc = NULL;
    }
    rfree(r1); rfree(r2); rfree(rest);
}

Mod = (!NoMod ID) SEP r:REG rest:REMAINDER {
    if (guardsrc && (strcmp(num(guardsrc), num(r.val)) == 0 || strcmp(num(r.val), "18") == 0)) {
        guardsrc = NULL;
    }
    rfree(r); rfree(rest);
}

NoMod = (
    'nop' | 'cmp' | 'cmn' | 'prfm' | 'prfum'
    | 'st' [1234]
    | 'stlr' [bh]?
    | 'st' 'n'? 'p'
    | 'str' [bh]?
    | 'sttr' [bh]?
    | 'stur' [bh]?
)

Branch = (
      'tbz' | 'tbnz'
    | 'cbz' | 'cbnz'
    | 'blr' | 'bl' | 'br' | 'ret'
    | 'b' '.'? cc?
) SEP rest:REMAINDER {
    guardsrc = NULL;
}

cc = 'eq' | 'ne' | 'cs' | 'hs' | 'cc' | 'lo' | 'mi' | 'pl'
    | 'vs' | 'vc' | 'hi' | 'ls' | 'ge' | 'lt' | 'gt' | 'le' | 'al'

%%

void
arm64_guardelim(struct op* ops)
{
    // look for guard
    // iterate while we don't see branches or labels (single BB)
    // if guard src is not modified:
    // remove any matching guards
    struct op* op = ops;
    yycontext ctx;
    while (op) {
        if (op->label) {
            guardsrc = NULL;
        }
        redundant = false;
        memset(&ctx, 0, sizeof(yycontext));
        ctx.op = op;
        yyparse(&ctx);
        if (redundant)
            opremove(op);
        op = op->next;
        yyrelease(&ctx);
    }
}
