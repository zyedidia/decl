%{
#include <stdio.h>

#include "arm64/arm64.h"
#include "util.h"
#include "op.h"

// Read a byte from input.
#define YY_INPUT(ctx, buf, result, max_size)      \
{                                                 \
    result = fread(buf, 1, max_size, ctx->input); \
}                                                 \
%}

Top = Insn* !.

Insn = - Label? (
      FnDirective Comment?
    | BundleDirective Comment?
    | TrustedDirective | Enable
    | UntrustedDirective | Disable
    | LFIDirective
    | Directive Comment?
    | Comment
    | Any
) Comment? (EOL | ';')+

Comment = '//' (!EOL .)*

Label = < ([0-9]+ | ID) > ':' - {
    mklabel(strndup(yytext, yyleng));
}

BundleDirective = < '.bundle_align' - > {
    mkdirective(bundle_align());
}

AlignDirective = '.p2align' - rest:REMAINDER {
    mkdirective(xasprintf(".p2align %s", rest.val));
    // comment out for clang-decl, uncomment for gcc-decl
    // mkdirective(bundle_align());
}

FnDirective = < '.type' - ([^,])* ',' - [@%] 'function' - > {
    mkdirective(xasprintf("%s", yytext));
    // comment out for clang-decl, uncomment for gcc-decl
    // mkdirective(bundle_align());
}

TrustedDirective = '.section' - '.text.trusted' rest:REMAINDER {
    struct op* op = mkdirective(xasprintf(".section .text.trusted%s", rest.val));
    op->truststart = true;
    rfree(rest);
}

UntrustedDirective = < ('.text' | '.section') (!EOL .)* > {
    struct op* op = mkdirective(strndup(yytext, yyleng));
    op->notruststart = true;
}

Enable = ('//' | '#') 'lfi:enable' (!EOL .)* {
    struct op* op = mkcomment("//lfi:enable");
    op->notruststart = true;
}

Disable = ('//' | '#') 'lfi:disable' (!EOL .)* {
    struct op* op = mkcomment("//lfi:disable");
    op->truststart = true;
}

LFIDirective = ('//' | '#') 'lfi:' rest:REMAINDER {
    mkinsn("//lfi:%s", rest.val);
    rfree(rest);
}

Directive = < '.' (!EOL .)* > - {
    mkdirective(strndup(yytext, yyleng));
}

Any = rest:RemainderOrComment {
    if (strlen(rest.val) > 0)
        mkinsn("%s", rest.val);
    rfree(rest);
}

RemainderOrComment = < (!(EOL | ';' | '/*' | '//') .)* > { $$ = (Result) { .val = strndup(yytext, yyleng) } }

%%

bool
arm64_parseinit(FILE* input)
{
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.input = input;
    bool success = yyparse(&ctx);
    yyrelease(&ctx);
    return success;
}
