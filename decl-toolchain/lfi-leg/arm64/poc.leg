%{
#include "arm64/arm64.h"
#include "op.h"
#include "util.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \
%}

Top = Adr | ReadSPLR | StRes

Adr = a:ADR rt:XREG COMMA rest:REMAINDER {
    mkinsn("%s %s, %s", a.val, rt.val, rest.val);
    mkinsn("mov w%s, w%s", num(rt.val), num(rt.val));
    rfree(a); rfree(rt); rfree(rest);
}

ADR = < ('adrp' | 'adr') > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }

ReadSPLR = (
    (i:MODINST rt:XREG COMMA r1:SPLR COMMA r2:XREG) {
        mkinsn("%s w%s, w%s, w%s", i.val, num(rt.val), num(r1.val), num(r2.val));
        rfree(i); rfree(rt); rfree(r1); rfree(r2);
    }
    | (i:MODINST rt:XREG COMMA r1:SPLR COMMA rest:REMAINDER) {
        mkinsn("%s w%s, w%s, %s", i.val, num(rt.val), num(r1.val), rest.val);
        rfree(i); rfree(rt); rfree(r1); rfree(rest);
    }
    | (i:MODINST rt:XREG COMMA r1:SPLR) {
        mkinsn("%s w%s, w%s", i.val, num(rt.val), num(r1.val));
        rfree(i); rfree(rt); rfree(r1);
    }
)

StRes = StNormalResAddr | StMultiRes1Addr | StMultiRes2Addr | StNormalRes | StMultiRes1 | StMultiRes2

StNormalResAddr = 'str' - res:RESREG COMMA r:AddrPoc {
    mkinsn("%s", r.pre);
    if (!isfixed(res.val)) {
        mkinsn("mov w22, w%s", num(res.val));
        mkinsn("str x22, %s", r.val);
    }
    rfree(r); rfree(res);
}

StMultiRes1Addr = 'stp' - res:RESREG COMMA reg:RESREG COMMA r:AddrPoc {
    mkinsn("%s", r.pre);
    if (!isfixed(res.val)) {
        mkinsn("mov w22, w%s", num(res.val));
        mkinsn("stp x22, %s, %s", reg.val, r.val);
    } else {
        mkinsn("stp xzr, %s, %s", reg.val, r.val);
    }
    rfree(r); rfree(reg); rfree(res);
}

StMultiRes2Addr = 'stp' - reg:REG COMMA res:RESREG COMMA r:AddrPoc {
    mkinsn("%s", r.pre);
    if (!isfixed(res.val)) {
        mkinsn("mov w22, w%s", num(res.val));
        mkinsn("stp %s, x22, %s", reg.val, r.val);
    } else {
        mkinsn("stp %s, xzr, %s", reg.val, r.val);
    }
    rfree(r); rfree(reg); rfree(res);
}

StNormalRes = 'str' - res:RESREG COMMA r:REMAINDER {
    if (!isfixed(res.val)) {
        mkinsn("mov w22, w%s", num(res.val));
        mkinsn("str x22, %s", r.val);
    }
    rfree(r); rfree(res);
}

StMultiRes1 = 'stp' - res:RESREG COMMA reg:REG COMMA r:REMAINDER {
    if (!isfixed(res.val)) {
        mkinsn("mov w22, w%s", num(res.val));
        mkinsn("stp x22, %s, %s", reg.val, r.val);
    } else {
        mkinsn("stp xzr, %s, %s", reg.val, r.val);
    }
    rfree(r); rfree(reg); rfree(res);
}

StMultiRes2 = 'stp' - reg:REG COMMA res:RESREG COMMA r:REMAINDER {
    if (!isfixed(res.val)) {
        mkinsn("mov w22, w%s", num(res.val));
        mkinsn("stp %s, x22, %s", reg.val, r.val);
    } else {
        mkinsn("stp %s, xzr, %s", reg.val, r.val);
    }
    rfree(r); rfree(reg); rfree(res);
}

# [xN, i]
AddrPoc = (LB r:XREG COMMA i:IMM RB) {
    $$ = (Result) {
        // use unoptimized sequence for x30 because POC sequence will be using x22
        .pre = xasprintf("add x18, x21, w%s, uxtw", num(r.val)),
        .val = xasprintf("[x18, %s]", i.val),
    };
    rfree(r); rfree(i);
}

%%

void
arm64_pocpass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
