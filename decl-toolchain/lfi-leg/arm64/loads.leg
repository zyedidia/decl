%{
#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \
%}

Top = LdOpt | LdNoOpt | LdMulti

LdOpt = l:LD (!'zt' rt:REG) COMMA addr:AddrOpt {
    ldst(l, rt, addr);
}

LdNoOpt = l:LD_BASIC rt:REG COMMA addr:AddrNoOpt {
    ldst(l, rt, addr);
}

LdMulti = l:LD_MULTI rt1:REG COMMA rt2:REG COMMA addr:AddrNoOpt {
    ldstmulti(l, rt1, rt2, addr);
}

# Loads that have all addressing modes available.
LD = < (
      'ldrs' [bhw]
    | 'ldr' [bh]?
    | 'prfm'
) > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }

# Loads that only have basic addressing modes available.
LD_BASIC = < (
      'ldurs' [bhw]
    | 'ldrs' [bhw]
    | 'ldr' [bh]?
    | 'ldur' [bh]?
    | 'ldxr' [bh]?
    | 'ldar' [bh]?
    | 'ldaxr' [bh]?
    | 'ldtrs' [bhw]?
    | 'ldtr' [bh]?
    | 'prfum'
    | 'ld' [1234] 'r'?
) > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }

LD_MULTI = < (
      'ldpsw'
    | 'ldp'
    | 'ld' 'a'? 'xp'
    | 'ldnp'
    | 'ld1sb'
) > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }

AO = 'add' | 'clr' | 'eor' | 'set'

%%

void
arm64_loadspass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
