%{
#include "arm64/arm64.h"
#include "op.h"
#include "args.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \

static void
rtcall(uint8_t imm)
{
    mkinsn("ldr %s, [%s, #%d]", args.meter == METER_NONE ? "x30" : "x25", args.sysexternal ? "x25" : "x21", imm);
    mkinsn("blr %s", args.meter == METER_NONE ? "x30" : "x25");
}
%}

Top = Retcall | Syscall

Syscall = < 'svc' - (!EOL .)* > - {
    if (!args.poc)
        mkinsn("mov x22, x30");
    else
        mkinsn("mov w22, w30");
    rtcall(0);
    mkinsn("add x30, x21, w22, uxtw");
}

Retcall = ('//lfi:' | '#lfi:') 'rtcall_return' {
    if (!args.poc)
        mkinsn("mov x22, x30");
    else
        mkinsn("mov w22, w30");
    rtcall(24);
    mkinsn("add x30, x21, w22, uxtw");
}

%%

void
arm64_syscallpass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);
    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
