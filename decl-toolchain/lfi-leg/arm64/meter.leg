%{
#include "arm64/arm64.h"
#include "op.h"
#include "args.h"
#include "util.h"

#define YY_INPUT(ctx, buf, result, max_size)   \
{                                              \
    char yyc = ctx->op->text[ctx->idx];        \
    ctx->idx += yyc != 0;                      \
    result = yyc == 0 ? 0 : (*(buf) = yyc, 1); \
}                                              \

static struct op*
mkinsnopt(char* insn, bool opt)
{
    struct op* op = mkinsn(insn);
    if (opt)
        op->rmforward = true;
    return op;
}

static void
tbzmeter(bool indirect, bool fncall)
{
    if (args.meter == METER_BRANCH_RESUME)
        mkinsn("mov x18, x30");
    if (fncall)
        mkdirective(bundle_align());
    mkdirective(".bundle_lock");
    mklabel("1000");
    mkinsn("sub x23, x23, #0");
    mkinsnopt("tbz x23, #63, 1000b+12", !fncall);
    mkinsnopt("blr x25", !fncall);
}

static void
fpmeter(bool indirect, bool fncall)
{
    if (fncall)
        mkdirective(bundle_align());
    mkdirective(".bundle_lock");
    mkinsn("sub x23, x23, #0");
    mkinsnopt("fmov d31, x23", !fncall);
    mkinsnopt("fneg d31, d31", !fncall);
}

static void
timermeter(bool indirect, bool fncall)
{
    if (fncall)
        mkdirective(bundle_align());
    mkdirective(".bundle_lock");
    mkinsn("sub x23, x23, #0");
}

static void (*meter)(bool, bool);
%}

Top = Ret | IndBranch | IndCall | TbzBranch | CbzBranch | Branch | Call

IndBranch = b:INDBRANCH SEP r:XREG {
    meter(true, false);
    mkinsn("%s %s", b.val, r.val);
    mkdirective(".bundle_unlock");
    rfree(b); rfree(r);
}

Ret = 'ret' - 'x30'? - !. {
    mkinsn("bic x24, x30, %s", bundle_bicmask());
    meter(true, false);
    mkinsn("ret x24");
    mkdirective(".bundle_unlock");
}

IndCall = b:INDCALL SEP r:XREG {
    meter(true, true);
    mkinsn("%s %s", b.val, r.val);
    mkdirective(".bundle_unlock");
    rfree(b); rfree(r);
}

TbzBranch = b:TBZ r:REG COMMA imm:IMM COMMA name:NAME {
    meter(false, false);
    mktbz(b.val, r.val, imm.val, name.val);
    mkdirective(".bundle_unlock");
    rfree(b); rfree(r); rfree(imm); rfree(name);
}

CbzBranch = b:CBZ r:REG COMMA name:NAME {
    meter(false, false);
    struct op* op = mkinsn("%s %s, %s", b.val, r.val, name.val);
    op->target = strdup(name.val);
    op->branch = true;
    mkdirective(".bundle_unlock");
    rfree(b); rfree(r); rfree(name);
}

TBZ = < ('tbz' | 'tbnz') > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }
CBZ = < ('cbz' | 'cbnz') > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }
NAME = < [0-9\\]* ID > - { $$ = (Result) { .val = strndup(yytext, yyleng) } }

Branch = b:DIRBRANCH SEP name:NAME {
    meter(false, false);
    struct op* op = mkinsn("%s %s", b.val, name.val);
    op->target = strdup(name.val);
    op->branch = true;
    mkdirective(".bundle_unlock");
    rfree(b); rfree(name);
}

Call = b:CALL SEP rest:REMAINDER {
    meter(false, true);
    mkinsn("%s %s", b.val, rest.val);
    mkdirective(".bundle_unlock");
    rfree(b); rfree(rest);
}

INDBRANCH = < ('br') > {
    $$ = (Result) { .val = strndup(yytext, yyleng) };
}

INDCALL = < ('blr') > {
    $$ = (Result) { .val = strndup(yytext, yyleng) };
}

CALL = < ('bl') > {
    $$ = (Result) { .val = strndup(yytext, yyleng) };
}

BCC = ('b' '.'? 'eq')
    | ('b' '.'? 'ne')
    | ('b' '.'? 'cs')
    | ('b' '.'? 'hs')
    | ('b' '.'? 'cc')
    | ('b' '.'? 'lo')
    | ('b' '.'? 'mi')
    | ('b' '.'? 'pl')
    | ('b' '.'? 'vs')
    | ('b' '.'? 'vc')
    | ('b' '.'? 'hi')
    | ('b' '.'? 'ls')
    | ('b' '.'? 'ge')
    | ('b' '.'? 'lt')
    | ('b' '.'? 'gt')
    | ('b' '.'? 'le')
    | ('b' '.'? 'al')

BCCBRANCH = < ( BCC ) > {
    $$ = (Result) { .val = strndup(yytext, yyleng) };
}

DIRBRANCH = < (
	  BCC
    | 'b'
) > {
    $$ = (Result) { .val = strndup(yytext, yyleng) };
}

%%

void
arm64_meterpass(struct op* op)
{
    if (!op->insn)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.op = op;
    oplocate(op);

    switch (args.meter) {
    case METER_BRANCH:
    case METER_BRANCH_RESUME:
        meter = tbzmeter;
        break;
    case METER_FP:
        meter = fpmeter;
        break;
    case METER_TIMER:
        meter = timermeter;
        break;
    default:
        fprintf(stderr, "meter pass run without a valid meter setting\n");
        return;
    }

    if (yyparse(&ctx)) {
        opremove(op);
        opfree(op);
    }
    yyrelease(&ctx);
}
